@namespace CEC.Blazor.Examples.Components

@inherits ViewBase

<h1>Hello, world!</h1>

Welcome to your new app.

<div class="container bg-light p-2 border">
    <h3>View [Page] Locking</h3>
    <div class="alert @alertcss m-4">
        This view is @buttonStatus
    </div>
    <div>
        <p>Try this link when the View is Locked - <a href="https://github.com/ShaunCurtis/CEC.Blazor.Examples">Link to the Github Repo</a>. </p>
    </div>
    <div class="container text-right p-2">
        <button type="button" class="btn @buttoncss" @onclick="(e => this.SwitchLock())">@buttonLabel</button>
    </div>
</div>

<div class="container bg-light mt-3 p-2 border">
    <h3>Modal Dialogs</h3>
    <p>Click on "Fetch Data as a Dialog" and you can view the Fetch Data page in a Modal Dialog.  If you don't have a button, use the "X" button in the top right corner to exit it.</p>
    <p>Click on "Counter as a Dialog" and you can view the Fetch Data page in a Modal Dialog.  There's a exit button that only apperas if Counter is opened as a dialog.</p>
    <p>The "Are You Sure Dialog" opens a dialog and "locks" exit from the application.</p>
    <div class="container text-right p-2">
        <button type="button" class="btn btn-info" @onclick="(e => this.CounterDialog())">Counter as a Dialog</button>
        <button type="button" class="btn btn-dark" @onclick="(e => this.FetchDataDialog())">Fetch Data as a Dialog</button>
        <button type="button" class="btn btn-primary" @onclick="(e => this.AreYouSureAsync())">Are You Sure Dialog</button>
    </div>
</div>

<SurveyPrompt Title="How is Blazor working for you?" />

@code{
    private bool isLocked = false;

    private string buttonLabel => isLocked ? "Unlock" : "Lock";

    private string buttonStatus => isLocked ? "Locked" : "Unlocked";

    private string buttoncss => isLocked ? "btn-danger" : "btn-success";

    private string alertcss => isLocked ? "alert-danger" : "alert-success";


    private void SwitchLock()
    {
        isLocked = !isLocked;
        if (isLocked) this.ViewManager.LockView();
        else this.ViewManager.UnLockView();
    }

    protected async void AreYouSureAsync()
    {
        this.ViewManager.LockView();
        var modalOptions = new ModalOptions()
        {
            Title = "Exit Confirm",
            HideHeader = false,
        };
        modalOptions.Parameters.Add("Message", "Try navigating to another site.");
        var result = await this.ViewManager.ShowModalAsync<YesNo>(modalOptions);
        if (result.ResultType == ModalResultType.Cancel)
        {
            //Do something to stop
        }
        this.ViewManager.UnLockView();
    }

    protected async void FetchDataDialog()
    {
        this.ViewManager.LockView();
        var modalOptions = new ModalOptions()
        {
            Title = "Fetch Data in a Dialog",
            HideHeader = false,
            ShowCloseButton = true,
        };
        modalOptions.Parameters.Add("ModalBodyCSS", "p-0");
        modalOptions.Parameters.Add("ModalCSS", "modal-xl");
        var result = await this.ViewManager.ShowModalAsync<FetchData>(modalOptions);
        if (result.ResultType == ModalResultType.Cancel)
        {
            //Do something to stop
        }
        this.ViewManager.UnLockView();
    }

    protected async void CounterDialog()
    {
        this.ViewManager.LockView();
        var modalOptions = new ModalOptions()
        {
            Title = "Counter in a Dialog",
            HideHeader = false,
            ShowCloseButton = true,
        };
        modalOptions.Parameters.Add("ModalBodyCSS", "p-0");
        modalOptions.Parameters.Add("ModalCSS", "modal-xl");
        var result = await this.ViewManager.ShowModalAsync<Counter>(modalOptions);
        if (result.ResultType == ModalResultType.Cancel)
        {
            //Do something to stop
        }
        this.ViewManager.UnLockView();
    }

}
